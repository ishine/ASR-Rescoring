14:02:00,417 root INFO namespace(dev_am_path='espnet_data/alfred/dev/hyps_score.json', dev_hyps_text_path='espnet_data/alfred/dev/hyps_text.json', dev_lm_path='RescoreBert/result/MD_MWED/8best/dev_lm.json', dev_ref_text_path='espnet_data/alfred/dev/ref_text.json', n_best=8, output_path='rescore_result/RescoreBert/MD_MWED', test_am_path='espnet_data/alfred/test/hyps_score.json', test_hyps_text_path='espnet_data/alfred/test/hyps_text.json', test_lm_path='RescoreBert/result/MD_MWED/8best/test_lm.json', test_ref_text_path='espnet_data/alfred/test/ref_text.json')
14:02:00,423 root INFO 
def find_best_weight(am, lm, hyps, ref, config):
    best_cer = sys.float_info.max

    hyps_len = []
    for utt_hyps in hyps:
        utt_hyps_len = []
        for hyp_num, hyp in enumerate(utt_hyps):
            if hyp_num == config.n_best:
                break
            utt_hyps_len.append(len(hyp))
        hyps_len.append(utt_hyps_len)

    for weight in tqdm(np.arange(0.0, 1.01, 0.01)):
        final_score = rescore(weight, hyps_len, am, lm, config)
        predict_hyps = get_highest_score_hyp(final_score, hyps)
        error = cer(ref, predict_hyps)
        if error < best_cer:
            best_cer = error
            best_weight = weight

    return best_weight, best_cer

14:02:00,424 root INFO 
def rescore(weight, hyps_len, am, lm, config):
    am = np.array(am)[:, :config.n_best]
    lm = np.array(lm)
    hyps_len = np.array(hyps_len)
    final_score = (1-weight)*(am)/hyps_len + weight*(lm)/hyps_len
    #final_score = (1-weight)*(am)/hyps_len + weight*(lm)/hyps_len
    return final_score

14:02:41,801 root INFO best_weight: 0.33
14:02:41,801 root INFO dev cer: 0.04447236547986033
14:02:42,236 root INFO test cer: 0.049129003006729344
